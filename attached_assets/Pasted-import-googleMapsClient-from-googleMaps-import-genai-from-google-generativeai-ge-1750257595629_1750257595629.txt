import { googleMapsClient } from './googleMaps';
import { genai } from 'google-generativeai';

genai.configure({ api_key: process.env.GOOGLE_API_KEY });

interface InfrastructureScores {
  healthcare: { total: number; close: number; premium: number };
  education: { total: number; close: number; premium: number };
  transport: { total: number; close: number; premium: number };
  commercial: { total: number; close: number; premium: number };
  lifestyle: { total: number; close: number; premium: number };
  connectivity: number;
  safety: { total: number };
  environment: { total: number };
  breakdown: { category: string; score: number; reason: string }[];
}

interface UserPreferences {
  riskTolerance?: 'low' | 'medium' | 'high';
  investmentHorizon?: 'short' | 'medium' | 'long';
}

interface PopulationGrowthResult {
  populationGrowthRate: number;
  scenarios: { optimistic: number; conservative: number; expected: number };
  breakdown: { factor: string; score: number; reason: string }[];
  mapPreview: string;
}

async function calculatePopulationGrowthRate(
  lat: number,
  lng: number,
  locationType: 'metropolitan' | 'city' | 'town' | 'village' | 'rural',
  investmentViability: number,
  infrastructureScores: InfrastructureScores,
  userPreferences: UserPreferences = {}
): Promise<PopulationGrowthResult> {
  const result: PopulationGrowthResult = {
    populationGrowthRate: 0,
    scenarios: { optimistic: 0, conservative: 0, expected: 0 },
    breakdown: [],
    mapPreview: `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=15&size=400x200&key=${process.env.GOOGLE_API_KEY}`
  };

  const factors = await calculatePopulationGrowthFactors(lat, lng, locationType, infrastructureScores);
  const totalPopulationScore = Object.values(factors.scores).reduce((sum, score) => sum + score, 0);

  const growth = await calculateGrowthBase(
    lat,
    lng,
    locationType,
    totalPopulationScore,
    investmentViability,
    userPreferences
  );

  result.populationGrowthRate = growth.expected;
  result.scenarios = growth;
  result.breakdown.push(...factors.breakdown);

  return result;
}

async function calculatePopulationGrowthFactors(
  lat: number,
  lng: number,
  locationType: string,
  infrastructureScores: InfrastructureScores
): Promise<{
  scores: { [key: string]: number };
  breakdown: { factor: string; score: number; reason: string }[];
}> {
  const scores = {
    housingSupport: 0,
    healthcareCapacity: 0,
    educationQuality: 0,
    transportAccess: 0,
    economicOpportunity: 0,
    connectivityAppeals: 0
  };
  const breakdown: { factor: string; score: number; reason: string }[] = [];

  const places = await fetchPlaces(lat, lng, ['school', 'hospital', 'park']);
  const prompt = `Analyze population growth factors for a ${locationType} location at (${lat}, ${lng}) with:
  - Healthcare: ${infrastructureScores.healthcare.total}
  - Education: ${infrastructureScores.education.total}
  - Transport: ${infrastructureScores.transport.total}
  - Commercial: ${infrastructureScores.commercial.total}
  - Connectivity: ${infrastructureScores.connectivity}
  - Amenities: ${places.length}
  Return JSON: {
    housingSupport: { score: number, reason: string },
    healthcareCapacity: { score: number, reason: string },
    educationQuality: { score: number, reason: string },
    transportAccess: { score: number, reason: string },
    economicOpportunity: { score: number, reason: string },
    connectivityAppeals: { score: number, reason: string }
  }`;

  try {
    const response = await genai.generateContent({
      model: 'gemini-2.5-pro',
      prompt,
      grounding: 'google_search',
      deepThink: true
    });
    const factors = JSON.parse(response.text);

    scores.housingSupport = Math.min(10, factors.housingSupport.score);
    scores.healthcareCapacity = Math.min(12, factors.healthcareCapacity.score);
    scores.educationQuality = Math.min(10, factors.educationQuality.score);
    scores.transportAccess = Math.min(8, factors.transportAccess.score);
    scores.economicOpportunity = Math.min(10, factors.economicOpportunity.score);
    scores.connectivityAppeals = Math.min(5, factors.connectivityAppeals.score);

    breakdown.push(
      { factor: 'housingSupport', score: scores.housingSupport, reason: factors.housingSupport.reason },
      { factor: 'healthcareCapacity', score: scores.healthcareCapacity, reason: factors.healthcareCapacity.reason },
      { factor: 'educationQuality', score: scores.educationQuality, reason: factors.educationQuality.reason },
      { factor: 'transportAccess', score: scores.transportAccess, reason: factors.transportAccess.reason },
      { factor: 'economicOpportunity', score: scores.economicOpportunity, reason: factors.economicOpportunity.reason },
      { factor: 'connectivityAppeals', score: scores.connectivityAppeals, reason: factors.connectivityAppeals.reason }
    );
  } catch (error) {
    console.error('Gemini factor analysis failed:', error);
    scores.housingSupport = Math.min(10, infrastructureScores.lifestyle.total * 0.5);
    scores.healthcareCapacity = Math.min(12, infrastructureScores.healthcare.total * 0.8);
    scores.educationQuality = Math.min(10, infrastructureScores.education.total * 0.6);
    scores.transportAccess = Math.min(8, infrastructureScores.transport.total * 0.5);
    scores.economicOpportunity = Math.min(10, infrastructureScores.commercial.total * 0.4);
    scores.connectivityAppeals = Math.min(5, infrastructureScores.connectivity * 0.025);

    breakdown.push(
      { factor: 'housingSupport', score: scores.housingSupport, reason: 'Fallback: Based on lifestyle infrastructure.' },
      { factor: 'healthcareCapacity', score: scores.healthcareCapacity, reason: 'Fallback: Based on healthcare infrastructure.' },
      { factor: 'educationQuality', score: scores.educationQuality, reason: 'Fallback: Based on education infrastructure.' },
      { factor: 'transportAccess', score: scores.transportAccess, reason: 'Fallback: Based on transport infrastructure.' },
      { factor: 'economicOpportunity', score: scores.economicOpportunity, reason: 'Fallback: Based on commercial infrastructure.' },
      { factor: 'connectivityAppeals', score: scores.connectivityAppeals, reason: 'Fallback: Based on connectivity score.' }
    );
  }

  return { scores, breakdown };
}

async function calculateGrowthBase(
  lat: number,
  lng: number,
  locationType: string,
  totalPopulationScore: number,
  investmentViability: number,
  userPreferences: UserPreferences
): Promise<{ optimistic: number; conservative: number; expected: number }> {
  const maxGrowth = locationType === 'metropolitan' ? 10 : locationType === 'city' ? 8 : 6;
  const minGrowth = locationType === 'rural' ? -6 : -4;

  let marketAdjustment = 0;
  const marketPrompt = `Analyze population growth trends for a ${locationType} location at (${lat}, ${lng}). Return JSON: { adjustment: number, reason: string }`;
  try {
    const response = await genai.generateContent({
      model: 'gemini-2.5-pro',
      prompt: marketPrompt,
      grounding: 'google_search',
      deepThink: true
    });
    marketAdjustment = JSON.parse(response.text).adjustment;
  } catch (error) {
    console.error('Gemini market trend analysis failed:', error);
  }

  let populationGrowthBase = (totalPopulationScore / 55) * maxGrowth + marketAdjustment;

  if (investmentViability < 25) populationGrowthBase -= 1.5;
  else if (investmentViability > 75) populationGrowthBase += 1;

  if (userPreferences.riskTolerance === 'high') populationGrowthBase += 0.5;
  else if (userPreferences.riskTolerance === 'low') populationGrowthBase -= 0.5;

  const growth = {
    optimistic: Math.max(minGrowth, Math.min(maxGrowth * 1.2, populationGrowthBase + 1)),
    conservative: Math.max(minGrowth, Math.min(maxGrowth * 0.8, populationGrowthBase - 1)),
    expected: Math.max(minGrowth, Math.min(maxGrowth, populationGrowthBase))
  };

  return growth;
}

async function fetchPlaces(lat: number, lng: number, types: string[]): Promise<any[]> {
  const cacheKey = `places:${lat}:${lng}:${types.join(',')}`;
  const cached = await redis.get(cacheKey);
  if (cached) return JSON.parse(cached);

  const places: any[] = [];
  for (const type of types) {
    const response = await fetchWithRetry({
      url: `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=5000&type=${type}&key=${process.env.GOOGLE_API_KEY}`
    });
    places.push(...response.results);
  }

  await redis.set(cacheKey, JSON.stringify(places), 'EX', 86400);
  return places;
}

async function fetchWithRetry({ url, maxRetries = 3 }: { url: string; maxRetries?: number }): Promise<any> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = await fetch(url);
      return await response.json();
    } catch (error) {
      if (attempt === maxRetries) throw error;
      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));
    }
  }
}

const redis = {
  get: async (key: string) => null,
  set: async (key: string, value: string, mode: string, ttl: number) => {}
};